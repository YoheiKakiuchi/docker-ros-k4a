;;!/usr/bin/env roseus

(ros::roseus-add-msgs "visualization_msgs")
(ros::roseus-add-msgs "sensor_msgs")

(ros::roseus "azure_kinect_parser" :anonymous nil)

(setq body-map '((0 "PELVIS" nil)
                 (1 "SPINE_NAVAL" "PELVIS")
                 (2 "SPINE_CHEST" "SPINE_NAVAL")
                 (3 "NECK" "SPINE_CHEST")
                 (4 "CLAVICLE_LEFT" "SPINE_CHEST")
                 (5 "SHOULDER_LEFT" "CLAVICLE_LEFT")
                 (6 "ELBOW_LEFT" "SHOULDER_LEFT")
                 (7 "WRIST_LEFT" "ELBOW_LEFT")
                 (8 "HAND_LEFT" "WRIST_LEFT")
                 (9 "HANDTIP_LEFT" "HAND_LEFT")
                 (10 "THUMB_LEFT" "WRIST_LEFT")
                 (11 "CLAVICLE_RIGHT" "SPINE_CHEST")
                 (12 "SHOULDER_RIGHT" "CLAVICLE_RIGHT")
                 (13 "ELBOW_RIGHT" "SHOULDER_RIGHT")
                 (14 "WRIST_RIGHT" "ELBOW_RIGHT")
                 (15 "HAND_RIGHT" "WRIST_RIGHT")
                 (16 "HANDTIP_RIGHT" "HAND_RIGHT")
                 (17 "THUMB_RIGHT" "WRIST_RIGHT")
                 (18 "HIP_LEFT" "PELVIS")
                 (19 "KNEE_LEFT" "HIP_LEFT")
                 (20 "ANKLE_LEFT" "KNEE_LEFT")
                 (21 "FOOT_LEFT" "ANKLE_LEFT")
                 (22 "HIP_RIGHT" "PELVIS")
                 (23 "KNEE_RIGHT" "HIP_RIGHT")
                 (24 "ANKLE_RIGHT" "KNEE_RIGHT")
                 (25 "FOOT_RIGHT" "ANKLE_RIGHT")
                 (26 "HEAD" "NECK")
                 (27 "NOSE" "HEAD")
                 (28 "EYE_LEFT" "HEAD")
                 (29 "EAR_LEFT" "HEAD")
                 (30 "EYE_RIGHT" "HEAD")
                 (31 "EAR_RIGHT" "HEAD")))

(defun head-position (person)
  (let ((p (float-vector 0 0 0)))
    (v+ (send (elt person 27) :worldpos) p p)
    (v+ (send (elt person 28) :worldpos) p p)
    (v+ (send (elt person 30) :worldpos) p p)
    (scale (/ 1.0 3) p p)
    p))
(defun left-hand-position (person)
  (let ((p (float-vector 0 0 0)))
    (v+ (send (elt person 8) :worldpos) p p)
    (v+ (send (elt person 9) :worldpos) p p)
    (scale 0.5 p p)
    p))
(defun right-hand-position (person)
  (let ((p (float-vector 0 0 0)))
    (v+ (send (elt person 15) :worldpos) p p)
    (v+ (send (elt person 16) :worldpos) p p)
    (scale 0.5 p p)
    p))

(defun body-coords (person)
  (let((cds0 (elt person 0))
       (cds1 (elt person 1))
       (cds2 (elt person 2))
       )
  
(setq *recog-person* nil)
(defun tracking-callback (mak)
  (setq *recog-person* (instantiate vector 5))
  (let (debug-list)
  (dolist (m (send mak :markers))
    (let* ((id (send m :id))
           (person-id (/ id 100))
           (parts-id  (mod id 100))
           (cds (ros::tf-pose->coords (send m :pose)))
           )
      (unless (> person-id 4)
        (send cds :put :parts parts-id)
        (send cds :put :person person-id)
        (send cds :transform *depth-on-world* :world)
        (let ((ar (arrow)))
          (send ar :transform cds)
          (push ar debug-list))
        (let ((p (elt *recog-person* person-id)))
          (cond
           (p (setf (elt p parts-id) cds))
           (t
            (setq p (instantiate vector 32))
            (setf (elt p parts-id) cds)
            (setf (elt *recog-person* person-id) p))
           )))))
  (pprint debug-list)
  (when debug-list
    (send *irtviewer* :objects debug-list)
    (send *irtviewer* :draw-objects)
    )
  )
  )
(setq *depth-on-world* (make-coords))
(defun imu-callback (imu)
  (let ((cds
         (orient-coords-to-axis (make-coords) (float-vector 0 0 1)
                                (let ((la (send imu :linear_acceleration)))
                                  (normalize-vector
                                   (float-vector (send la :x) (send la :y) (send la :z))))
                                1e-10)))
    (send cds :transform *cds-imu-depth*)
    ))

(ros::subscribe "/k4a/imu" sensor_msgs::Imu #'imu-callback)
(ros::subscribe "/k4a/body_tracking_data" visualization_msgs::MarkerArray #'tracking-callback)

(setq *tfl* (instance ros::transform-listener :init))
;; imu -> depth_camera
(send *tfl* :wait-for-transform "imu_link" "depth_camera_link" (ros::time 0) 2.0)
(setq *cds-imu-depth* (send *tfl* :lookup-transform "imu_link" "depth_camera_link" (ros::time 0)))

(load "models/arrow-object.l")
(make-irtviewer)

(ros::rate 10)
(while (ros::ok)
  (when *recog-person*

    (setq *recog-person* nil)
    )
  (ros::spin-once)
  (x::window-main-one)
  (ros::sleep)
  )
